#6]
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>

sem_t e,f,s;   //e=empty f =filed  s= mutex   are semaphore
int buff[5]; 
int in=0,out=0;

void* producer(void* arg){
   sem_wait(&e);
   sem_wait(&s);
   int data=rand();
   buff[in]=data;
   printf("\nProduct %d entered by %lu successfully \n",data,pthread_self());
   in = (in+1)%5;
   sem_post(&s);
   sem_post(&f);
   sleep(5);
   return NULL;

}

void* consumer(void* arg){
  int conti=0;
  int data;
  
  do{
     sem_wait(&f);
     sem_wait(&s);
     int data=buff[out];
     printf("\nProduct %d consumed by %lu successfully \n",data,pthread_self());
     out = (out+1)%5;
     sem_post(&s);
     sem_post(&e);
     
  }while(conti!=5);
  return NULL;
  
}
  
void main(){
pthread_t tid[5], ctid;
sem_init(&f,0,0);
sem_init(&e,0,5);
sem_init(&s,0,1);

for(int i=0;i<5;i++){
   pthread_create(&tid[i],NULL,producer,NULL);    // Create producer threads.
 }
 
pthread_create(&ctid,NULL,consumer,NULL);        //Create Consumer Threads

for(int i=0;i<5;i++){
   pthread_join(tid[i],NULL);                                        // Wait for producer threads.
}
pthread_join(ctid,NULL);                         // Wait for the consumer thread to complete.

 
}   
   

Output:-   
student@student:~$ gcc Producer.c
student@student:~$ ./a.out

Product 1804289383 entered by 125112747554368 successfully 

Product 846930886 entered by 125112739161664 successfully 

Product 1681692777 entered by 125112730768960 successfully 

Product 1714636915 entered by 125112588158528 successfully 

Product 1957747793 entered by 125112722376256 successfully 

Product 1804289383 consumed by 125112713983552 successfully 

Product 846930886 consumed by 125112713983552 successfully 

Product 1681692777 consumed by 125112713983552 successfully 

Product 1714636915 consumed by 125112713983552 successfully 

Product 1957747793 consumed by 125112713983552 successfully 
